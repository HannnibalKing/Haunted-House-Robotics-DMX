Metadata-Version: 2.4
Name: haunted-sim
Version: 0.1.0
Summary: Terminal demos for Haunted House Robotics DMX sequences
Author: Jose 'Hannibal' Herrera
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: License :: OSI Approved :: MIT License
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Provides-Extra: test
Requires-Dist: pytest>=7.4; extra == "test"
Requires-Dist: pytest-cov>=4.1; extra == "test"

# Terminal Simulation Demos

Install the distributable CLI or run the module locally.

```powershell
cd simulations
pip install .[test]     # Install the package with testing extras
haunt-sim skeleton --instant
```

Use the legacy `console_demo.py` wrapper if you prefer direct script execution—the CLI entry point simply proxies to the same engine.

## Available Scenarios

| Scenario | Command | Highlights |
|----------|---------|------------|
| `skeleton` | `python console_demo.py skeleton` | Servo choreography, DMX fades, motion trigger |  
| `ghost` | `python console_demo.py ghost` | Carriage glide, fog blast, LED strobe |  
| `app` | `python console_demo.py app` | Guest rating arrival, AI blueprint synthesis |

## Flags

- `--speed 2.0` – Run twice as fast while keeping timing ratios.
- `--loop 3` – Replay the same sequence multiple passes.
- `--instant` – Print the entire script with zero delays (useful for demos or CI).

## Example

```powershell
cd simulations
python console_demo.py skeleton --speed 1.5
```

### Run Tests

```powershell
pytest
```

During playback you'll see timestamped cues (e.g., `M29`, `L12`) that match the Arduino and DMX labels in the corresponding hardware projects. This lets viewers visualize the show flow without powering the actual rigs.
